/*
 * @lc app=leetcode.cn id=1945 lang=rust
 *
 * [1945] 字符串转化后的各位数字之和
 *
 * https://leetcode.cn/problems/sum-of-digits-of-string-after-convert/description/
 *
 * algorithms
 * Easy (70.37%)
 * Likes:    64
 * Dislikes: 0
 * Total Accepted:    35.8K
 * Total Submissions: 50.9K
 * Testcase Example:  '"iiii"\n1'
 *
 * 给你一个由小写字母组成的字符串 s ，以及一个整数 k 。你的任务是通过一种特殊处理将字符串转为整数，然后通过重复对它的数位求和 k
 * 次来进行转换。更具体地说，执行以下步骤：
 *
 *
 * 用字母在字母表中的位置 替换 该字母，将 s 转化 为一个整数（也就是，'a' 用 1 替换，'b' 用 2 替换，... 'z' 用 26
 * 替换）。
 * 接着，将整数 转换 为其 各位数字之和 。
 * 共重复 转换 操作（第 2 步） k 次 。
 *
 *
 * 例如，如果 s = "zbax" 且 k = 2 ，那么执行下述步骤后得到的结果是整数 8 ：
 *
 *
 * 转化："zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124
 * 转换 #1：262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17
 * 转换 #2：17 ➝ 1 + 7 ➝ 8
 *
 *
 * 返回执行上述 操作 后得到的 结果整数。
 *
 *
 *
 * 示例 1：
 *
 * 输入：s = "iiii", k = 1
 *
 * 输出：36
 *
 * 解释：
 *
 * 操作如下：
 *
 *
 * 转化："iiii" ➝ "(9)(9)(9)(9)" ➝ "9999" ➝ 9999
 * 转换 #1：9999 ➝ 9 + 9 + 9 + 9 ➝ 36
 *
 *
 * 因此，结果整数为 36 。
 *
 *
 *
 * 示例 2：
 *
 * 输入：s = "leetcode", k = 2
 *
 * 输出：6
 *
 * 解释：
 *
 * 操作如下：
 *
 *
 * 转化："leetcode" ➝ "(12)(5)(5)(20)(3)(15)(4)(5)" ➝ "12552031545" ➝
 * 12552031545
 * 转换 #1：12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
 * 转换 #2：33 ➝ 3 + 3 ➝ 6
 *
 *
 * 因此，结果整数为 6 。
 *
 *
 *
 * 示例 3：
 *
 *
 * 输入：s = "zbax", k = 2
 *
 * 输出：8
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= s.length <= 100
 * 1 <= k <= 10
 * s 由小写英文字母组成
 *
 *
 */

struct Solution;

// @lc code=start
impl Solution {
    pub fn get_lucky(s: String, k: i32) -> i32 {
        // 转为初始值: 字符串先转为字节, 得到码值差; 再分解两位数, 得到全部位数之和; 注意需要加1, 因为a原始得分为1
        let init_byte_sum: i32 = s
            .bytes()
            .map(|chr| (chr - 'a' as u8 + 1) as i32)
            .map(|val: i32| -> i32 { val / 10 + val % 10 }) // 如果是两位数, 分别求和 24 = 2 + 4
            .sum::<i32>();

        // 开始堆叠k次
        (0..k - 1).fold(init_byte_sum, |x, _| {
            // 每次都把数字转字符串, 每一位求码值差, 再求和
            x.to_string()
                .bytes()
                .map(|x| (x - '0' as u8) as i32)
                .sum::<i32>()
        })
    }
}
// @lc code=end
